Title: Abstract Mashups for Enterprise Java

Tasks:

   hazems download template from speaker resource center and check into
   google code area.

   edburns check in this outline

I. Build the case for mashups edburns

  A. Define mashability

  B. How does mashability influence the success of a venture

    1. For the public

    2. For the enterprise

  C. Case studies

    1. twitter

    2. PENDING: find good example of mashup that is used inside the
    enterprise.

      Ed potential contact people

        Alan Braverman DONE

        Hanspeter Duennenberger from Credit Suisse DONE

        Garmin contacts DONE

      Hazem potential contact people

        Roland Barcia IBM (DONE but unfortunately he did not answer me)

II. Build the case for a unified model, built on industry standards hazems (All DONE)

  A. Is there a unified model followed by the mashup service providers?  No.

    There is no unified model agreed by all the mashup service providers for mashup service 
	creation and consumption. We have different representation of services: SOAP, REST. Different 
	protocols are used like ATOM, RSS, and JSON.
	Without a unified model, clients will have to write a great deal of code to interact with the
    mashup services.

  B. Let's imagine

    How about building this demo

    Having a master dataTable and a detailed Google Map, a yahoo weather
    indicator, a youTube listing and a twitter listing. When we click on
    the master dataTable row, the location information is shown in the
    detailed Google Map, the weather information in the yahoo weather
    indicator, the tweets done by people in that location, and finally
    the videos uploaded by people in that location.

   Have some slides that show the complexity you would have to mitigate
   to build such a solution (code examples to access both twitter, youTube
   and Google Maps as well).

  C. What could we do if we had a unified programming model for the famous mashup services?
     One of the possible ways is Mashups4JSF then we will define what is Mashups4JSF and illustrates 
	 its architecture. Finally we build this demo live with Mashups4JSF Using NetBeans.

III. Conclusion  (All DONE)

  A. Mashups are important

  B. Having a mashup meta-model gives developers a lot of power.

  C. Key ingredients for a mashup meta-model

    * Mashup integration happens on the server

    * There is a declarative syntax for describing the mashup.

      - This syntax includes a suitably powerful component abstraction model

    * There is a powerful programming language that works closely with
      the declarative syntax.

    * Hide the lower level APIs offered by the mashup service providers

    * Having good separation between services eases maintenance

    

    
