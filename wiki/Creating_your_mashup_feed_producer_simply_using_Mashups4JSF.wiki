Mashups4JSF now provides a way for creating mashup feed producer from existing domain classes by just using simple annotations. Let see an example of how to define mashup feed producer (atom or rss) using Mashups4JSF.

Assume the domain model have the following classes: *News* and *NewsItems* where the *News* has a list of the *NewsItems*. To be able to export *News* data as Rss or Atom feed all what we should do is as follows:


{{{
@Feed(type=FeedType.Rss)
public class News {
    static List <NewsItem> news = new ArrayList<NewsItem>();
    
    // Generate random data (It can be got from the database).
    static {
	for (int i = 0; i < 10; ++i) {
	    news.add(new NewsItem("News Title" + i, "News Desc" + i, "http://www.google.com/search?q=" + i, "News Category" + i, "News Author" + i));
	}
    }
    
    @FeedItems
    public List getNews() {
	return news;
    }
    
    @FeedTitle
    public String getTitle() {
	return "News Channel Title";
    }
    
    @FeedDescription
    public String getDescription() {
	return "News Channel Description";
    }
    
    @FeedLink
    public String getLink() {
	return "http://www.google.com";
    }
}
}}}


As we see here, we just annotate the *News* class with the *@Feed* (specifying the feed type) and the attributes of the class with the *@FeedTitle*, *@FeedDescription*, *@FeedLink*, and *@FeedItems*.<br>
<br>
In the feed item class *NewsItems*, we should do the following:<br>

{{{
@FeedItem
public class NewsItem {
    String title;
    String desc;
    String link;
    String category;
    String author;
    
    @ItemTitle
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @ItemDescription
    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    @ItemLink
    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }
    
    @ItemCategory
    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }
    
    @ItemAuthor
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }
    â€¦    
}
}}}


As we see here, we just annotate the *NewsItem* class with the *@ItemFeed* and the attributes of the class with the *@ItemTitle*, *@ItemDescription*, *@ItemLink*, *@ItemCategory*, and *@ItemAuthor*.

By using these simple set of annotations, we could declare the Rss or Atom Feed producer data source.

Finally, to produce the feed in the Http response, we should call the Mashups4JSF Generic feed producer service as follows:

{{{


GenericServicesFactory.getFeedProducerService().produceFeed(new News(), response.getWriter());

}}}


As we see here, we provided an instance of our *News* class, and a writer to a response so that the Mashups4JSF can generate the Rss or Atom feed in.

Here are the demos:

[http://www.mashups4jsf.com/mashups4jsf-examples/NewsRssServlet http://www.mashups4jsf.com/mashups4jsf-examples/NewsRssServlet]

[http://www.mashups4jsf.com/mashups4jsf-examples/NewsAtomServlet http://www.mashups4jsf.com/mashups4jsf-examples/NewsAtomServlet]

[http://www.mashups4jsf.com/mashups4jsf-examples/pages/rssFeedReader2.xhtml http://www.mashups4jsf.com/mashups4jsf-examples/pages/rssFeedReader2.xhtml]

[http://www.mashups4jsf.com/mashups4jsf-examples/pages/atomFeedReader2.xhtml http://www.mashups4jsf.com/mashups4jsf-examples/pages/atomFeedReader2.xhtml]

I wish that this feature could be useful for the library users.